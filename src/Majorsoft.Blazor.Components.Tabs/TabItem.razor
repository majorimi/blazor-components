@if (Parent.ActiveTab == this)
{
	<div class="@(Parent?.Animate ?? false ? "tabContentAnimate" : "") @(_visible ? "visible" : "")" @attributes=AllOtherAttributes>
		@Content
	</div>
}

@code {
	[CascadingParameter] internal TabsPanel Parent { get; set; }

	protected override void OnInitialized()
	{
		if (Parent == null)
		{
			throw new ArgumentNullException(nameof(Parent), $"{nameof(TabItem)} must exist within a {nameof(TabsPanel)}");
		}

		Parent.AddTab(this);
	}

	private bool _visible = false;
	private bool Visible
	{
		get => _visible;
		set
		{
			if(value != _visible)
			{
				_visible = value;
				StateHasChanged();
			}
		}
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await Task.Delay(100);
		Visible = !Hidden && Parent.ActiveTab == this;
	}

	/// <summary>
	/// Required HTML content to show Header content of current TabItem.
	/// </summary>
	[Parameter] public RenderFragment Header { get; set; }
	/// <summary>
	/// Required HTML content to show content of current TabItem.
	/// </summary>
	[Parameter] public RenderFragment Content { get; set; }

	private bool _disabled = false;
	/// <summary>
	/// Determines whether the current rendered TabItem should be disabled or not.
	/// </summary>
	[Parameter] public bool Disabled
	{
		get => _disabled;
		set
		{
			if (_disabled != value)
			{
				_disabled = value;
				Parent?.TabDisabled(this);
			}
		}
	}

	private bool _hidden = false;
	/// <summary>
	/// Determines whether the current rendered TabItem should be hidden or not.
	/// </summary>
	[Parameter] public bool Hidden
	{
		get => _hidden;
		set
		{
			if (_hidden != value)
			{
				_hidden = value;
				Parent?.TabHidden(this);
			}
		}
	}

	/// <summary>
	/// Permalink value to append to the URL and activate the TabItem based on matching value.
	/// NOTE: in order to make TabActivation work `Majorsoft.Blazor.Components.PermaLink` component is used and it MUST set up correctly.
	/// </summary>
	[Parameter] public string Permalink { get; set; } = "";

	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }
}