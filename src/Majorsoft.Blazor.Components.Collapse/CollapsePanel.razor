<div @ref="_inputRef" class="collapsePanel" tabindex="200" disabled="@Disabled" @attributes=AllOtherAttributes>
	<div id="@($"collapse_{_componentId}")" class="collapseHeader @(Animate ? "animate" : "")" style="@GetStyle()"
		@onmouseenter="() => _hovered = true" @onmouseleave="() => _hovered = false" @onclick="ExpandCollapse">
		@if(Collapsed)
		{
			@(CommonHeader ?? CollapsedHeaderContent)
		}
		else
		{ 
			@(CommonHeader ?? ExpandedHeaderContent)
		}
	</div>
	<div class="collapseContent @(Animate ? "animate" : "")"
		 style="opacity: @(Collapsed ? "0" : "1"); overflow: @(ShowContentOverflow ? "auto" : "hidden"); max-height: @GetContentHeight()">
		@Content
	</div>
</div>

@inject ILogger<CollapsePanel> _logger

@code {
	[CascadingParameter] internal Accordion Parent { get; set; }
	protected override void OnInitialized()
	{
		Parent?.AddCollapsePanel(this);
	}

	private bool _hovered = false;
	private string _componentId = Guid.NewGuid().ToString("n");
	private ElementReference _inputRef;
	/// <summary>
	/// Exposes a Blazor <see cref="ElementReference"/> of the wrapped around HTML element. It can be used e.g. for JS interop, etc.
	/// </summary>
	public ElementReference InnerElementReference => _inputRef;

	/// <summary>
	/// Common header for Collapse control it will be shown for any collapsed state. It overrides ExpandedHeaderContent, CollapsedHeaderContent.
	/// </summary>
	[Parameter] public RenderFragment CommonHeader { get; set; }
	/// <summary>
	/// Special header for Collapse control it is shown when item Expanded.
	/// </summary>
	[Parameter] public RenderFragment ExpandedHeaderContent { get; set; }
	/// <summary>
	/// Special header for Collapse control it is shown when item Collapsed.
	/// </summary>
	[Parameter] public RenderFragment CollapsedHeaderContent { get; set; }

	/// <summary>
	/// HTML Content of the collapse panel.
	/// </summary>
	[Parameter] public RenderFragment Content { get; set; }

	private string _expandedColor = "211,211,211";//lightGray
	/// <summary>
	/// Sets the `style` of the `background-color` when tab is Active. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string ExpandedColor
	{
		get => _expandedColor;
		set => _expandedColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}
	private string _collapsedColor = "211,211,211";//lightGray
	/// <summary>
	/// Sets the `style` of the `background-color` when tab is not the Active tab. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string CollapsedColor
	{
		get => _collapsedColor;
		set => _collapsedColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}
	private string _hoverColor = "245, 245, 245";//WhiteSmoke
	/// <summary>
	/// Sets the `style` of the `background-color` when button is hovered over with mouse. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string HoverColor
	{
		get => _hoverColor;
		set => _hoverColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}

	/// <summary>
	/// Sets the height (in reality sets max-height because of CSS transition issues) of Content panel in `px`. 0 is auto.
	/// </summary>
	[Parameter] public int ContentHeight { get; set; } = 200;

	/// <summary>
	/// Sets the max-height if Content panel <see cref="ContentHeight"/> is set to 0 (auto).
	/// https://css-tricks.com/using-css-transitions-auto-dimensions/
	/// </summary>
	[Parameter] public int MaxAllowedContentHeight { get; set; } = 200;

	/// <summary>
	/// Determines whether all the rendered HTML elements should be disabled or not.
	/// </summary>
	[Parameter] public bool Disabled { get; set; } = false;

	private bool _collapsed = false;
	/// <summary>
	/// Can be set if panel should be collapsed `true` or expanded `false`.
	/// </summary>
	[Parameter] public bool Collapsed
	{
		get => _collapsed;
		set
		{
			if(value != _collapsed)
			{
				_collapsed = value;
				InvokeAsync(async () =>
				{
					await CollapseEvent();
				});
			}
		}
	}

	/// <summary>
	/// Determines to apply CSS animation and transition on Collapse state changes or not.
	/// Note: in case of Content panel <see cref="ContentHeight"/> is set to 0 (auto), then use <see cref="MaxAllowedContentHeight"/> to set max-height CSS property which will be animated.
	/// Also important based on max-height value transition speed for expand/collapse might differ!
	/// </summary>
	[Parameter] public bool Animate { get; set; } = true;

	/// <summary>
	/// Determines whether content overflow is visible (scrollable) or not (hidden).
	/// </summary>
	[Parameter] public bool ShowContentOverflow { get; set; } = false;

	/// <summary>
	/// Callback function called when panel collapsed or expanded. Collapsed state is the callback parameter.
	/// </summary>
	[Parameter] public EventCallback<bool> OnCollapseChanged { get; set; }

	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	private async Task ExpandCollapse()
	{
		_collapsed = !Collapsed;
		WriteDiag($"{nameof(ExpandCollapse)} called on DIV click - Collapsed stete: {Collapsed}");

		await CollapseEvent();
	}
	private async Task CollapseEvent()
	{
		Parent?.ActivateCollapsePanel(_collapsed ? null : this);

		if (OnCollapseChanged.HasDelegate)
		{
			await OnCollapseChanged.InvokeAsync(_collapsed);
		}
	}

	private string GetContentHeight()
	{
		if (Collapsed)
		{
			return "0px;";
		}

		return ContentHeight <= 0 ? $"{MaxAllowedContentHeight}px;" : $"{ContentHeight}px;";
	}
	private string GetStyle()
	{
		if(_hovered)
		{
			return $"background-color: rgb({HoverColor});";
		}

		if(Collapsed)
		{
			return $"background-color: rgb({CollapsedColor});";
		}

		return $"background-color: rgb({ExpandedColor});";
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}