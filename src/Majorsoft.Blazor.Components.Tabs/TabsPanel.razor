<div @ref="_inputRef" id="@($"tabsPanel_{_componentId}")" class="tabsPanel" disabled="@Disabled" tabindex="200" @attributes=AllOtherAttributes>
	<div class="tabsHeader @TabPositon.ToString().ToLower()">
		@foreach (var tab in _tabs)
		{
			if (!tab.Hidden)
			{
				<button type="button" parent="@($"tabsPanel_{_componentId}")" @onclick=@(() => ActivateTab(tab)) disabled="@tab.Disabled" class="@GetButtonClass(tab)" 
						style="width: @(TabItemsWidth != 0 ? $"{TabItemsWidth}px" : "auto"); height: @(TabItemsHeight != 0 ? $"{TabItemsHeight}px" : "auto"); @GetStyle(tab)"
						@onmouseenter="() => _hoveredTab = tab" @onmouseleave="() => _hoveredTab = null">
					@tab.Header
					@*<a name="@tab.Permalink"></a>*@
				</button>
			}
		}
	</div>

	<CascadingValue Value="this">
		@TabItems
	</CascadingValue>
</div>

@implements IDisposable

@inject IServiceProvider _serviceProvider
@inject ILogger<TabsPanel> _logger

@code { 
	private IPermaLinkWatcherService? PermalinkWatcherService = null; //Should be injected but do not break existing Tabs usage!!
	protected override void OnAfterRender(bool firstRender)
	{
		if(firstRender)
		{
			PermalinkWatcherService = _serviceProvider.GetService<IPermaLinkWatcherService>();
			if(PermalinkWatcherService is not null)
			{
				WriteDiag($"OnInitialized {nameof(IPermaLinkWatcherService)} was found subscribing to events.");
				PermalinkWatcherService.PermalinkDetected += PermalinkDetected;

				PermalinkWatcherService.CheckPermalink(true); //Permalink detection could already happened so need to retrigger permalink event. 
			}

			if (ActiveTab is null)
			{
				ActiveTab = _tabs.FirstOrDefault();
				StateHasChanged();
			}
		}
	}

	private TabItem? _hoveredTab;

	private string _componentId = Guid.NewGuid().ToString("n");
	protected ElementReference _inputRef;
	/// <summary>
	/// Exposes a Blazor <see cref="ElementReference"/> of the wrapped around HTML element. It can be used e.g. for JS interop, etc.
	/// </summary>
	public ElementReference InnerElementReference => _inputRef;

	/// <summary>
	/// Required HTML content to set TabItems as <see cref="RenderFragment"/>.
	/// </summary>
	[Parameter] public RenderFragment TabItems { get; set; }

	private string _activeColor = "211,211,211";//lightGray
	/// <summary>
	/// Sets the `style` of the `background-color` when tab is Active. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string ActiveColor
	{
		get => _activeColor;
		set => _activeColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}
	private string _inactiveColor = "255, 255, 255";//white
	/// <summary>
	/// Sets the `style` of the `background-color` when tab is not the Active tab. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string InactiveColor
	{
		get => _inactiveColor;
		set => _inactiveColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}
	private string _hoverColor = "245, 245, 245";//WhiteSmoke
	/// <summary>
	/// Sets the `style` of the `background-color` when button is hovered over with mouse. Use HTML specified: **Color Names**, **RGB**, **HEX** or with **HSL** values.
	/// </summary>
	[Parameter]
	public string HoverColor
	{
		get => _hoverColor;
		set => _hoverColor = new HtmlColor(value)?.RgbColor.ToRgbString();
	}

	/// <summary>
	/// Sets all <see cref="TabItem"/> elements height in `px` (0 is `auto`).
	/// </summary>
	[Parameter] public int TabItemsHeight { get; set; } = 40;
	/// <summary>
	/// Sets all <see cref="TabItem"/> elements Width in `px` (0 is `auto`).
	/// 
	/// </summary>
	[Parameter] public int TabItemsWidth { get; set; } = 100;
	/// <summary>
	/// Determines whether all the rendered HTML elements should be disabled or not.
	/// </summary>
	[Parameter] public bool Disabled { get; set; } = false;

	/// <summary>
	/// Enables or disables `TabItem` activation with URL Permalink fragment.
	/// NOTE: in order to make TabActivation work `Majorsoft.Blazor.Components.PermaLink` component is used and it MUST set up correctly.
	/// </summary>
	[Parameter] public bool AllowTabActivationByPermalink { get; set; } = true;

	/// <summary>
	/// Determines to apply CSS animation and transion on Tab changes or not.
	/// </summary>
	[Parameter] public bool Animate { get; set; } = true;
	/// <summary>
	/// Determines TabItems vertical positon {Left, Center, Right }
	/// </summary>
	[Parameter] public TabPositons TabPositon { get; set; } = TabPositons.Left;

	private IList<TabItem> _tabs = new List<TabItem>();
	/// <summary>
	/// Returns the number of <see cref="TabItem"/> int the given `TabsPanel`.
	/// </summary>
	public int TabCount => _tabs.Count;
	/// <summary>
	/// Returns all the <see cref="TabItem"/> reference added to the group. It can be used for activating any of the tabs.
	/// </summary>
	public IEnumerable<TabItem> Tabs => _tabs;

	private TabItem? _activeTab;
	/// <summary>
	/// Returns currently active <see cref="TabItem"/> element ref also can be used to set which Tab should be active "selected".
	/// </summary>
	[Parameter]
	public TabItem? ActiveTab
	{
		get => _activeTab;
		set => InvokeAsync(() => ActivateTab(value));
	}

	/// <summary>
	/// Callback function called when other tab activated. Active TabItem is the callback parameter.
	/// </summary>
	[Parameter] public EventCallback<TabItem> OnTabChanged { get; set; }

	/// <summary>
	/// Blazor capture for any unmatched HTML attributes.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> AllOtherAttributes { get; set; }

	internal void AddTab(TabItem tabPage)
	{
		WriteDiag($"{nameof(AddTab)}: {tabPage}");

		_tabs.Add(tabPage);
		StateHasChanged();
	}
	internal void TabDisabled(TabItem tabPage)
	{
		if (ActiveTab == tabPage && tabPage.Disabled && _tabs.Count > 1)
		{
			var index = _tabs.IndexOf(tabPage);
			ActiveTab = _tabs[index == 0 ? 1 : --index];
		}
		StateHasChanged();
	}
	internal void TabHidden(TabItem tabPage)
	{
		if (ActiveTab == tabPage && tabPage.Hidden && _tabs.Count > 1)
		{
			var index = _tabs.IndexOf(tabPage);
			ActiveTab = _tabs[index == 0 ? 1 : --index];
		}
		StateHasChanged();
	}

	private string GetButtonClass(TabItem tab)
	{
		var classes = new List<string>();
		classes.Add("tabItem");

		classes.Add(tab == ActiveTab ? "active" : "");
		classes.Add(Animate ? "animate" : "");

		return string.Join(' ', classes.Where(x => !string.IsNullOrWhiteSpace(x)));
	}
	private string GetStyle(TabItem tab)
	{
		if(tab == ActiveTab)
		{
			return $"background-color: rgb({ActiveColor});";
		}
		if(_hoveredTab == tab)
		{
			return $"background-color: rgb({HoverColor});";
		}

		return $"background-color: rgb({InactiveColor});";
	}

	private async Task ActivateTab(TabItem? tab)
	{
		WriteDiag($"{nameof(ActivateTab)}: {tab}");

		if (_activeTab != tab && (!tab?.Disabled ?? true))
		{
			_activeTab = tab;

			if (OnTabChanged.HasDelegate)
			{
				await OnTabChanged.InvokeAsync(ActiveTab);
			}

			if (AllowTabActivationByPermalink && !string.IsNullOrWhiteSpace(_activeTab?.Permalink))
			{
				PermalinkWatcherService?.ChangePermalink(_activeTab?.Permalink, true);
			}
		}
	}

	private void PermalinkDetected(object? sender, PermalinkDetectedEventArgs args)
	{
		if(!AllowTabActivationByPermalink)
		{ 
			return;
		}

		var tabToActivate = _tabs.FirstOrDefault(x => x.Permalink?.ToLower().Equals(args.Permalink.ToLower()) ?? false);
		if(tabToActivate is not null)
		{
			InvokeAsync(() => ActivateTab(tabToActivate));
		}
	}

	public void Dispose()
	{
		if(PermalinkWatcherService is not null)
		{
			PermalinkWatcherService.PermalinkDetected -= PermalinkDetected;
		}	
	}

	private void WriteDiag(string message)
	{
		_logger.LogDebug($"Component {this.GetType()}: {message}");
	}
}