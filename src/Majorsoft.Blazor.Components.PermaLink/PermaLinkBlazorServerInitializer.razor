@using Microsoft.Extensions.Logging
@using Majorsoft.Blazor.Components.Common.JsInterop.Scroll

@inject IScrollHandler _scrollHandler
@inject NavigationManager _navigationManager
@inject INavigationHistoryService _navigationHistoryService
@inject ILogger<IPermaLinkWatcherService> _logger
@inject SingletonComponentService<PermaLinkBlazorServerInitializer> _singleton

@implements IAsyncDisposable

@code {
    private IPermaLinkWatcherService _permalinkWatcher;

    protected override void OnInitialized()
    {
        if (_singleton.Initialized)
        {
            throw new ApplicationException($"Component: '{nameof(PermalinkBlazorWasmInitializer)}' is not allowed to have multiple instances. Please define it one your e.g.: 'MainLayout.razor' or some common place.");
        }

        _singleton.Initialized = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //setup permalink
            _permalinkWatcher = new PermaLinkWatcherService(_scrollHandler, _navigationManager, _logger, _navigationHistoryService);
            _permalinkWatcher.WatchPermaLinks();
        }
    }

    /// <summary>
    /// Gets or sets if peramlink should be scrolled smoothly into view or not.
    /// Note: smooth scroll on element level might not supported by all Browsers.
    /// </summary>
    [Parameter] public bool SmoothScroll
    {
        get => _permalinkWatcher.SmoothScroll;
        set 
        { 
            if(_permalinkWatcher is not null)
            {
                _permalinkWatcher.SmoothScroll = value;
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_scrollHandler is not null)
        {
            await _scrollHandler.DisposeAsync();
        }

        _permalinkWatcher?.Dispose();
        _singleton.Initialized = false;
    }
}