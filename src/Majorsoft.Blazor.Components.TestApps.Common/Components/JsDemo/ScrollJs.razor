@*Scroll on page components, can be placed anywhere on a page, moved to a new component, etc. but should be used once per page*@
<ScrollToPageBottom PaddingFromTop="@_scrcollTopBottonMargin"
					PaddingFromSide="@_scrcollTopSideMargin"
					HorizontalPosition="@_scrollHorizontalPosition"
					SmootScroll="@_smoothScroll"
					AnimateOnHover="@_animateOnHover"
					VisibleFromPagePercentage="2"
					VisibleUntilPagePercentage="75">
	<Content>
		<div style="background:dodgerblue; color:white; width: 36px; height:40px; box-shadow: 1px 2px #e1dddd;">
			<i class="fas fa-2x fa-chevron-down p-1"></i>
		</div>
	</Content>
</ScrollToPageBottom>

<ScrollToPageTop PaddingFromBottom="@_scrcollTopBottonMargin"
				 PaddingFromSide="@_scrcollTopSideMargin"
				 HorizontalPosition="@_scrollHorizontalPosition"
				 SmootScroll="@_smoothScroll"
				 AnimateOnHover="@_animateOnHover"
				 VisibleFromPagePercentage="30">
	<Content>
		<div style="background:dodgerblue; color:white; width: 36px; height:40px; box-shadow: 1px 2px #e1dddd;">
			<i class="fas fa-2x fa-chevron-up p-1"></i>
		</div>
	</Content>
</ScrollToPageTop>

<div class="container-fluid p-3 mb-3 border rounded">
	<PermaLinkElement PermaLinkName="scroll-js" IconActions="PermaLinkIconActions.Copy|PermaLinkIconActions.Navigate" IconMarginTop="8" IconSize="18">
		<Content><h3>Scroll JS</h3></Content>
	</PermaLinkElement>
	<p>
		<strong>Scroll JS</strong> is a set of <strong>Extension methods</strong> for <code>ElementReference</code> objects.
		Also an <strong>injectable <code>IScrollHandler</code> service</strong> for non element level functions and callback event handlers.
	</p>

	<div class="row pb-2">
		<div class="col-12">
			<label><strong><code>ScrollToElementAsync()</code> will scroll the given <code>ElementReference</code> (Button) to the visible aarea</strong>:</label>
			<br />
			<button class="btn btn-primary" @ref="_scrollToView" @onclick="ScrollToView">Scroll to view</button>
			Smooth scroll to View (might not supported by this Browser): <input type="checkbox" @bind="_smoothScrollToView" />
		</div>
	</div>

	<hr />

	<p>
		<label>
			<strong><code>ScrollToPageBottom</code> and <code>ScrollToPageTop</code></strong> components will render "floating" element with customizable placing and content
			for wrapping <strong>Scroll JS</strong> scroll to page top or bottom functions.
			<strong>Both component can be set inside ANY components which will apply for the whole page. Hence both components should be added only once per page!</strong>
		</label>
	</p>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Top/Bottom margin (can be set separately for both types of controls): @(_scrcollTopBottonMargin)px
			<input type="range" class="w-100" min="0" max="100" @bind="_scrcollTopBottonMargin" @oninput="(e => _scrcollTopBottonMargin = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Side right/left margin (can be set separately for both types of controls): @(_scrcollTopSideMargin)px
			<input type="range" class="w-100" min="0" max="100" @bind="_scrcollTopSideMargin" @oninput="(e => _scrcollTopSideMargin = int.Parse(e.Value?.ToString()))" />
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Smooth scroll (can be set separately for both types of controls): <input class="mr-3" type="checkbox" @bind="_smoothScroll" />
			Animate on Hover (can be set separately for both types of controls): <input type="checkbox" @bind="_animateOnHover" />
		</div>
	</div>

	<div class="row pb-2">
		<div class="col-12 col-lg-8 col-xl-5">
			Horizontal Position right/left (can be set separately for both types of controls): <select class="form-control selectpicker w-100" @bind="_scrollHorizontalPosition">
				@foreach (var item in Enum.GetValues(typeof(PageScrollHorizontalPosition)))
				{
					<option value="@item">@item</option>
				}
			</select>
		</div>
	</div>

	<hr />

	<div class="row pb-2">
		<div class="col-12">
			<p><code>RegisterPageScrollAsync()</code> will add event listener to HTML document/window <code>scroll</code></p>
			<button class="btn btn-primary" @onclick="ScrollEventHandler">@(_scrollSubscribed ? "Unsubscribe from scroll" : "Subscribe to scroll")</button>
			<br />
			<label><strong>Scroll Events log</strong>:</label>
			<textarea @ref="_log" @bind="_logMessage" class="form-control w-100 logText" readonly></textarea>
		</div>
	</div>

	<hr />

	<div class="row pb-2">
		<div class="col-12">
			<label><strong><code>ScrollToTopAsync()</code> and <code>ScrollToEndAsync()</code> will scroll inside the given <code>ElementReference</code> (textarea) to element top and bottom</strong>:</label>
			<br />
			Smooth scroll in Textbox: <input type="checkbox" @bind="_smoothScrollInTextbox" />
			<button class="btn btn-primary" @onclick="@(async () => await _log.ScrollToTopAsync(smooth: _smoothScrollInTextbox))">Scroll to Textbox Top</button>
			<button class="btn btn-primary" @onclick="@(async () => await _log.ScrollToEndAsync(smooth: _smoothScrollInTextbox))">Scroll to Textbox Bottom</button>
		</div>
	</div>
	<hr />
</div>

@implements IAsyncDisposable
@inject IScrollHandler _scrollHandler

@code {
	private string _scrollEventId = null;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
			return;

		await ScrollEventHandler();
	}

	private bool _smoothScrollInTextbox = true;

	//Scroll examples
	private ElementReference _scrollToView;
	private bool _smoothScrollToView;
	private async Task ScrollToView()
	{
		await _scrollToView.ScrollToElementAsync(_smoothScrollToView);
	}

	private ElementReference _log;
	private string _logMessage;
	private async Task PageScrolled(ScrollEventArgs args)
	{
		_logMessage += $"{DateTime.Now.TimeOfDay}: Page scrolled: X pos: {args.X}, Y pos: {args.Y}{Environment.NewLine}";
		StateHasChanged();

		await _log.ScrollToEndAsync(smooth: true);
	}

	private bool _scrollSubscribed = false;
	private async Task ScrollEventHandler()
	{
		if (_scrollSubscribed)
		{
			await _scrollHandler.RemovePageScrollAsync(_scrollEventId);
		}
		else
		{
			_scrollEventId = await _scrollHandler.RegisterPageScrollAsync(PageScrolled);
		}

		_scrollSubscribed = !_scrollSubscribed;
	}

	//Page scroll elements
	private int _scrcollTopBottonMargin = 20;
	private int _scrcollTopSideMargin = 24;
	private byte _scrcollBefore = 5;
	private PageScrollHorizontalPosition _scrollHorizontalPosition = PageScrollHorizontalPosition.Right;
	private bool _smoothScroll = true;
	private bool _animateOnHover = true;

	public async ValueTask DisposeAsync()
	{
		if (_scrollHandler is not null)
		{
			await _scrollHandler.DisposeAsync();
		}
	}
}